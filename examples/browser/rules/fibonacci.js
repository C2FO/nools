(function(){ function _getCompiled(nools){ return nools.compile({"define":[{"name":"Fibonacci","properties":"({ value:-1, sequence:null })"},{"name":"Result","properties":"({ value : -1 })"}],"rules":[{"name":"Recurse","options":{},"constraints":[["not","Fibonacci","f","f.sequence == 1"],["Fibonacci","f1","f1.sequence != 1"]],"action":"assert(new Fibonacci({sequence : f1.sequence - 1})); "},{"name":"Bootstrap","options":{},"constraints":[["Fibonacci","f","f.value == -1 && (f.sequence == 1 || f.sequence == 2)"]],"action":"modify(f, function(){ this.value = 1; }); "},{"name":"Calculate","options":{},"constraints":[["Fibonacci","f1","f1.value != -1",{"sequence":"s1"}],["Fibonacci","f2","f2.value != -1 && f2.sequence == s1 + 1",{"sequence":"s2"}],["Fibonacci","f3","f3.value == -1 && f3.sequence == s2 + 1"],["Result","r"]],"action":"modify(f3, function(){ this.value = r.result = f1.value + f2.value; }); retract(f1); "}],"scope":[]}, {name : "fibonacci"}); } if ("undefined" !== typeof exports) { if ("undefined" !== typeof module && module.exports) { return _getCompiled(require("../../nools.js")); } } else if ("function" === typeof define && define.amd) { define(["../../nools.js"], function (nools) { return _getCompiled(nools); }); } else { _getCompiled(this.nools); } }).call(this);
