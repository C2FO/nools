(function(){ function _getCompiled(nools){ return (function() { return function(options) { options = options || {}; var bind = function(scope, fn) { return function() { return fn.apply(scope, arguments); }; }, defined = options.defined || {}, scope = options.scope || {}; return nools.flow("auto-focus-compiled", function() { var State = defined.State = this.addDefined("State", function() { var Defined = function(name, state) { this.name = name, this.state = state; }, proto = Defined.prototype; return proto.constructor = function(name, state) { this.name = name, this.state = state; }, Defined; }()); this.rule("Bootstrap", { scope: scope }, [ [ State, "a", "a.name == 'A' && a.state == 'NOT_RUN'" ] ], function(facts, flow) { var a = facts.a, a = facts.a, modify = bind(flow, flow.modify); modify(a, function() { this.state = "FINISHED"; }); }), this.rule("A to B", { scope: scope }, [ [ State, "a", "a.name == 'A' && a.state == 'FINISHED'" ], [ State, "b", "b.name == 'B' && b.state == 'NOT_RUN'" ] ], function(facts, flow) { facts.a, facts.a; var b = facts.b, b = facts.b, modify = bind(flow, flow.modify); modify(b, function() { this.state = "FINISHED"; }); }), this.rule("B to C", { agendaGroup: "B to C", autoFocus: !0, scope: scope }, [ [ State, "b", "b.name == 'B' && b.state == 'FINISHED'" ], [ State, "c", "c.name == 'C' && c.state == 'NOT_RUN'" ] ], function(facts, flow) { var c = facts.c, c = facts.c, modify = bind(flow, flow.modify), focus = bind(flow, flow.focus); modify(c, function() { this.state = "FINISHED"; }), focus("B to D"); }), this.rule("B to D", { agendaGroup: "B to D", scope: scope }, [ [ State, "b", "b.name == 'B' && b.state == 'FINISHED'" ], [ State, "d", "d.name == 'D' && d.state == 'NOT_RUN'" ] ], function(facts, flow) { var d = facts.d, d = facts.d, modify = bind(flow, flow.modify); modify(d, function() { this.state = "FINISHED"; }); }); }); }; })(); } if ("undefined" !== typeof exports) { if ("undefined" !== typeof module && module.exports) { module.exports = _getCompiled(require("../../")); } } else if ("function" === typeof define && define.amd) { define(["../../"], function (nools) { return _getCompiled(nools); }); } else { _getCompiled(this.nools)(); } }).call(this);
